openapi: 3.0.3
info:
  title: Real Estate Analyzer Toolkit - OpenAPI 3.0
  description: >
    This REST API provides cookie authenticated endpoints to perform CRUD operations for user profiles and form submissions on the Real Estate
    Analyzer Toolkit server.
  license:
    name: MIT License
    url: https://github.com/nickelsr/Real-Estate-Analyzer-Toolkit-Server/blob/main/LICENSE
  version: 1.0.0

tags:
  - name: user
    description: User operations
  - name: form
    description: Real Estate Analyzation forms

paths:
  /register:
    post:
      tags:
        - user
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authenticate"
        required: true
      responses:
        201:
          201:
          description: User registration completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        min: 1
                        max: 2147483647
                        description: User id
                        example: 1
                      email:
                        type: string
                        description: User email
                        example: name@example.com
                      createdAt:
                        type: string
                        description: Creation date in timestamp with time zone format
                        example: 2020-02-15T20:30:00.481Z
                      updatedAt:
                        type: string
                        description: Creation date in timestamp with time zone format
                        example: 2020-02-15T20:30:00.481Z
        400:
          description: Request body failed validation. Refer to validationErrors in the response body.
          $ref: "#/components/responses/400"
        409:
          description: Email address in use. Choose a different email.
          $ref: "#/components/responses/409"
      security:
        - {}

  /login:
    post:
      tags:
        - user
      description: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authenticate"
        required: true
      responses:
        200:
          description: Login successful.
          headers:
            Set-Cookie:
              schema:
                type: string
                examples:
                  - connect.sid=s:okwAbj13; Path=/; HttpOnly; Secure; SameSite=Strict
        400:
          $ref: "#/components/responses/400"
        404:
          description: Invalid login credentials.
          $ref: "#/components/responses/404"
      security:
        - {}

  /form/fix-and-flip:
    post:
      tags:
        - form
      description: Create Fix-And-Flip record.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FixAndFlip"
        required: true
      responses:
        201:
          description: Successfully created record.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"

  /form/fix-and-flip/{id}:
    parameters:
      - name: id
        in: path
        required: true
        allowEmptyValue: false
        example: 1
        schema:
          type: integer
          minimum: 1
          maximum: 2147483647
    get:
      tags:
        - form
      description: Get Fix-And-Flip record by ID
      responses:
        200:
          description: Successfully fetched record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixAndFlip"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    put:
      tags:
        - form
      description: Update Fix-And-Flip record
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FixAndFlip"
        required: true
      responses:
        200:
          description: Successfully updated record.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
    delete:
      tags:
        - form
      description: Delete Fix-And-Flip record
      responses:
        200:
          description: Successfully deleted record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FixAndFlip"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"

  /form/fix-and-flips:
    get:
      tags:
        - form
      description: Get all Fix-And-Flip records
      responses:
        200:
          description: Successfully fetched resources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FixAndFlip"
        401:
          $ref: "#/components/responses/401"

components:
  schemas:
    Authenticate:
      description: Registration and Login fields
      type: object
      required:
        - email
        - password
      properties:
        email:
          description: A valid email address
          type: string
          example: name@example.com
        password:
          description: >
            A password at least 8 characters long, containing at least one lowercase letter, uppercase letter, number, and special character
          type: string
          example: Password1!

    ResponseBody:
      description: Json response body.
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    ValidationErrors:
      description: request inputs that failed validation
      type: object
      properties:
        field:
          type: string
        reason:
          type: string
    Error:
      description: Error response.
      type: object
      properties:
        message:
          description: A summary of the problem.
          type: string
          example: Your request failed validation.
        validationErrors:
          description: >
            An array of request parameters and body fields that failed validation.
          type: array
          items:
            type: object
            properties:
              name:
                description: Name of the field.
                type: string
                example: street_address
              reason:
                description: Summary of the reason for failure.
                type: string
                example: Must be non-empty.

    FixAndFlip:
      description: Fix And Flip form fields
      type: object
      required:
        - street_address
        - city
        - zip_code
        - after_repair_value
        - desired_profit
        - purchase_closing_costs
        - repair_costs
        - holding_costs
        - holding_time_months
        - agent_commission
        - sale_closing_costs
      properties:
        id:
          type: integer
          minimum: 1
          maximum: 2147483647
          example: 50
          readOnly: true
        street_address:
          type: string
          example: 555 Place Rd.
        city:
          type: string
          example: San Francisco
        state:
          type: string
          example: CA
        zip_code:
          type: string
          example: 12345
        property_type:
          type: string
          enum:
            - Single Family Home
            - Townhouse
            - Duplex
            - Condo
            - Apartment
            - Other
        num_bedrooms:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 2
        num_bathrooms:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 1
        square_footage:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 1100
        year_built:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 2005
        description:
          type: string
          description: Description of the property
          example: Needs minor repairs. Cozy neighborhood.
        after_repair_value:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 650000
        desired_profit:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 150000
        purchase_closing_costs:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 5000
        repair_costs:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 85000
        holding_costs:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 10000
        holding_time_months:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 6
        agent_commission:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 20000
        sale_closing_costs:
          type: integer
          minimum: 0
          maximum: 9223372036854775807
          example: 15000
        createdAt:
          type: string
          readOnly: true
        updatedAt:
          type: string
          readOnly: true

  responses:
    "200":
      description: Success.
      content:
        text/plain:
          schema:
            type: string
            example: OK
    "201":
      description: Success.
      content:
        text/plain:
          schema:
            type: string
            example: Created
    "400":
      description: Failed request validation.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Failed Authentication. Log in and retry.
      content:
        text/plain:
          schema:
            type: string
            example: Unauthorized
    "403":
      description: Forbidden. User does not have access to this resource.
      content:
        text/plain:
          schema:
            type: string
            example: Forbidden
    "404":
      description: Not Found.
      content:
        text/plain:
          schema:
            type: string
            example: Not Found
    "409":
      description: Conflict.
      content:
        text/plain:
          schema:
            type: string
            example: Conflict

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: id

security:
  - cookieAuth: []
